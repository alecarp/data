let currentImageCount = 5;
let imagesPerLoad = 5;

function showMainContent() {
  document.getElementById('startPage').style.display = 'none';
  document.getElementById('mainContent').style.display = 'block';
}

document.getElementById('imageForm').addEventListener('submit', function(e) {
  e.preventDefault();
  
  const prompt = document.getElementById('prompt').value;
  const negativePrompt = document.getElementById('negative-prompt').value;
  const style = document.getElementById('style').value;
  const camera = document.getElementById('camera').value;
  const viewpoint = document.getElementById('viewpoint').value;
  const lighting = document.getElementById('lighting').value;
  const aspectRatio = document.getElementById('aspect-ratio').value;
  imagesPerLoad = parseInt(document.getElementById('image-count').value);
  
  currentImageCount = 0;
  generateImages(prompt, negativePrompt, style, camera, viewpoint, lighting, aspectRatio);
});

function generateImages(prompt, negativePrompt, style, camera, viewpoint, lighting, aspectRatio) {
  const result = document.getElementById('result');
  if (currentImageCount === 0) {
    result.innerHTML = '<div class="image-grid"></div>';
  }
  
  const imageGrid = result.querySelector('.image-grid');
  const [width, height] = getImageDimensions(aspectRatio);
  
  for (let i = 0; i < imagesPerLoad; i++) {
    const imageUrl = generateStylizedImageUrl(prompt, negativePrompt, style, camera, viewpoint, lighting, width, height, currentImageCount + i);
    const imageContainer = document.createElement('div');
    imageContainer.className = `image-container ${style === 'glow-in-the-dark' ? 'glow-in-dark' : ''}`;
    imageContainer.style.paddingBottom = `${(height / width * 100)}%`;
    
    imageContainer.innerHTML = `
      <img src="${imageUrl}" alt="Imagen generada ${currentImageCount + i + 1}" width="${width}" height="${height}" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; object-fit: cover;">
      <div class="progress-overlay">0%</div>
    `;
    
    imageGrid.appendChild(imageContainer);
    simulateImageProgress(imageContainer, i);
    
    // Add click event listener to open modal
    imageContainer.querySelector('img').addEventListener('click', function() {
      openModal(this.src);
    });
  }
  
  currentImageCount += imagesPerLoad;
}

function simulateImageProgress(container, index) {
  let progress = 0;
  const overlay = container.querySelector('.progress-overlay');
  const interval = setInterval(() => {
    progress += Math.random() * 10;
    if (progress >= 100) {
      progress = 100;
      clearInterval(interval);
      setTimeout(() => {
        overlay.style.display = 'none';
      }, 500);
    }
    overlay.textContent = `${Math.round(progress)}%`;
  }, 200 + index * 50);
}

function generateStylizedImageUrl(prompt, negativePrompt, style, camera, viewpoint, lighting, width, height, index) {
  const baseUrl = 'https://source.unsplash.com';
  let stylizedPrompt = prompt;
  
  switch(style) {
    case '1800s':
      stylizedPrompt += ' 19th century photograph, sepia tone, Victorian era, vintage clothing, formal poses, daguerreotype style';
      break;
    case '30s-cartoon':
      stylizedPrompt += ' 1930s cartoon style black and white rubber hose animation';
      break;
    case '3d':
      stylizedPrompt += ' 3D render, volumetric lighting, depth, high-quality textures, realistic materials';
      break;
    case '70s':
      stylizedPrompt += ' 1970s style, retro, vintage, warm colors, disco era, bell-bottom pants, lava lamps, funky patterns';
      break;
    case '80s':
      stylizedPrompt += ' 1980s style, neon colors, synthwave, retro futurism, bold geometric patterns, Miami Vice aesthetic';
      break;
    case 'abstract':
      stylizedPrompt += ' abstract art, non-representational, shapes, colors, forms';
      break;
    case 'action-figure':
      stylizedPrompt += ' action figure, toy photography, plastic texture, articulated joints, collectible figurine, dynamic pose';
      break;
    case 'anime':
      stylizedPrompt += ' anime style, Japanese animation, big eyes, colorful hair';
      break;
    case 'caricature':
      stylizedPrompt += ' caricature style, exaggerated features, comical proportions, satirical art, super-deformed';
      break;
    case 'cartoon':
      stylizedPrompt += ' cartoon style, exaggerated features, bold outlines';
      break;
    case 'cctv-cam':
      stylizedPrompt += ' CCTV camera footage, grainy, low resolution, wide-angle lens, surveillance style, time stamp';
      break;
    case 'cinematic':
      stylizedPrompt += ' cinematic, dramatic lighting, wide angle, movie scene, high production value';
      break;
    case 'cinematic-horror':
      stylizedPrompt += ' cinematic horror, dark atmosphere, eerie lighting, suspenseful, high contrast, movie quality';
      break;
    case 'claymation':
      stylizedPrompt += ' claymation style, stop motion, clay figures, textured surface';
      break;
    case 'comic-book':
      stylizedPrompt += ' comic book style bold lines flat colors';
      break;
    case 'creepy':
      stylizedPrompt += ' dark eerie spooky';
      break;
    case 'creepy-footage':
      stylizedPrompt += ' disturbing old footage, grainy, scratched film, eerie atmosphere, vintage horror movie style';
      break;
    case 'cyberpunk':
      stylizedPrompt += ' cyberpunk, futuristic, neon lights, high tech low life';
      break;
    case 'disney':
      stylizedPrompt += ' Disney animation style, colorful, whimsical, expressive characters, magical atmosphere';
      break;
    case 'disturbing':
      stylizedPrompt += ' disturbing, macabre, grotesque, unsettling, nightmarish imagery';
      break;
    case 'famous-painter':
      stylizedPrompt += ' famous painter style, masterpiece, iconic brushstrokes, renowned artist technique';
      break;
    case 'fantasy':
      stylizedPrompt += ' fantasy, magical, otherworldly, mythical creatures, enchanted landscapes';
      break;
    case 'ghibli-studio':
      stylizedPrompt += ' Studio Ghibli style, Hayao Miyazaki, whimsical, hand-drawn animation, nature-inspired';
      break;
    case 'ghost':
      stylizedPrompt += ' ghostly, ethereal, translucent, spectral, haunting atmosphere';
      break;
    case 'glass':
      stylizedPrompt += ' made of glass, transparent, reflective, fragile, crystal clear';
      break;
    case 'glitch':
      stylizedPrompt += ' glitch art, digital distortion, pixelated, corrupted image, visual noise';
      break;
    case 'glow-in-the-dark':
      stylizedPrompt += ' glow-in-the-dark, luminescent, neon colors, black light reactive';
      break;
    case 'gothic':
      stylizedPrompt += ' gothic style, dark, brooding, ornate architecture, dramatic shadows';
      break;
    case 'gta':
      stylizedPrompt += ' Grand Theft Auto style, video game graphics, urban setting, satirical';
      break;
    case 'hanna-barbera':
      stylizedPrompt += ' Hanna-Barbera style, classic cartoon, limited animation, 1960s TV animation';
      break;
    case 'hyper-realistic':
      stylizedPrompt += ' hyper-realistic, extremely detailed, lifelike, ultra-high definition';
      break;
    case 'infrared':
      stylizedPrompt += ' infrared photography, false color, heat signature, thermal imaging';
      break;
    case 'mad-max':
      stylizedPrompt += ' Mad Max style, post-apocalyptic, desert wasteland, rusty vehicles, leather and spikes';
      break;
    case 'midjourney':
      stylizedPrompt += ' Midjourney AI art style, dreamlike, surreal, highly detailed';
      break;
    case 'miniature-movie':
      stylizedPrompt += ' miniature movie set, tilt-shift photography, small scale models, diorama';
      break;
    case 'negative':
      stylizedPrompt += ' photographic negative, inverted colors, film negative effect';
      break;
    case 'neon-led-light':
      stylizedPrompt += '  neon LED light, vibrant glowing colors, electric luminescence';
      break;
    case 'oil-painting':
      stylizedPrompt += ' oil painting technique, textured canvas, rich colors, visible brushstrokes';
      break;
    case 'origami':
      stylizedPrompt += ' origami style, folded paper art, geometric shapes, crisp edges';
      break;
    case 'pixar':
      stylizedPrompt += ' Pixar animation style, 3D computer animation, expressive characters, vibrant colors';
      break;
    case 'science-fiction':
      stylizedPrompt += ' science fiction, futuristic technology, alien worlds, space exploration';
      break;
    case 'sculpture':
      stylizedPrompt += ' sculptural art, three-dimensional, carved or molded material, textured surface';
      break;
    case 'simpsons':
      stylizedPrompt += ' The Simpsons style, yellow skin, overbite, big eyes, Springfield aesthetic';
      break;
    case 'sketch':
      stylizedPrompt += ' sketch, hand-drawn, pencil or ink lines, rough draft style';
      break;
    case 'stop-motion-puppet':
      stylizedPrompt += ' stop-motion puppet animation, articulated figurine, textured materials, slightly jerky movement';
      break;
    case 'surreal':
      stylizedPrompt += ' surreal, dreamlike, impossible scenarios, juxtaposition of unrelated elements';
      break;
    case 'vhs':
      stylizedPrompt += ' VHS tape quality, analog video artifacts, fuzzy image, tracking lines';
      break;
  }
  
  if (camera !== 'none') {
    stylizedPrompt += ` ${camera} camera`;
  }
  
  if (viewpoint !== 'none') {
    stylizedPrompt += ` ${viewpoint} view`;
  }
  
  if (lighting !== 'none') {
    stylizedPrompt += ` ${lighting} lighting`;
  }
  
  if (negativePrompt) {
    stylizedPrompt += ` NOT ${negativePrompt}`;
  }
  
  const encodedPrompt = encodeURIComponent(stylizedPrompt);
  return `${baseUrl}/${width}x${height}?${encodedPrompt}&sig=${index}`;
}

function getImageDimensions(aspectRatio) {
  const [widthRatio, heightRatio] = aspectRatio.split(':').map(Number);
  const baseSize = 300;
  let width, height;
  
  if (widthRatio > heightRatio) {
    width = baseSize;
    height = Math.round(baseSize * (heightRatio / widthRatio));
  } else {
    height = baseSize;
    width = Math.round(baseSize * (widthRatio / heightRatio));
  }
  
  return [width, height];
}

// Modal functionality
const modal = document.getElementById('imageModal');
const modalImg = document.getElementById('modalImage');
const closeBtn = document.getElementsByClassName('close')[0];

function openModal(imgSrc) {
  modal.style.display = 'block';
  modalImg.src = imgSrc;
}

closeBtn.onclick = function() {
  modal.style.display = 'none';
}

window.onclick = function(event) {
  if (event.target == modal) {
    modal.style.display = 'none';
  }
}